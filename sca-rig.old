variable "sca_admin_ip"
{
  type = "string"
  value = "139.59.150.107/32"
}

variable "sca_world_ip"
{
  type = "string"
  value = "0.0.0.0/0"
}

variable "sca_key_pub" {
  type    = "string"
  default = "/home/user/.ssh/sca-rig.pub"
}

variable "sca_key_ppk" {
  type    = "string"
  default = "/home/user/.ssh/sca-rig.ppk"
}

# Define build environment
provider "aws" {
  
  alias = "sca"

  # Region still required
  region = "us-west-2"

  # this one has to be set up with credentials and profile
  shared_credentials_file = "/home/user/.aws/credentials"
  profile = "staging"

}

# Configure the DigitalOcean Provider
provider "digitalocean" {
  alias = "sca"
  token = "${file("/home/user/.doc/credentials")}"
}


# Define build image access key
resource "aws_key_pair" "sca" {
  # Use our provider for the build
  provider = "aws.build"
  key_name   = "sca-key"
  public_key = "${file("$var.sca_key_pub")}"
}

resource "aws_security_group" "sca_cimaster_sec" {
  name        = "sca_cimaster_sec"
  description = "SCA CIMaster Security Group"
  provider = "aws.sca"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["$var.sca_admin_ip"]
  }

  ingress {
    from_port   = 50000
    to_port     = 50000
    protocol    = "tcp"
    cidr_blocks = ["$var.sca_admin_ip"]
  }

  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["$var.sca_admin_ip"]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = [
      "$var.sca_admin_ip",
      "$var.sca_user
    ]
  }

  tags {
    env = "staging"
    project = "sca"
  }
}

resource "aws_security_group" "sca_cislave_sec" {
  name        = "sca_cislave_sec"
  description = "SC CISlave sec"
  provider = "aws.sca"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["$var.sca_admin_ip"]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["$var.sca_world_ip"]
  }

  # use tags to identify environment, futher cleanup
  tags {
    env = "staging"
    project = "sca"
  }
}


# Define base image parameters.
data "aws_ami" "cislave" {

  # Use our provider for the build
  provider = "aws.sca"

  # One can filter by regex
  # name_regex = "^amzn-ami.+\\d+.+gp2$"

  # In case there is multiple images, use recent on.
  most_recent = true

  # Filter ami images by name
  filter {
    name   = "name"
    values = [ 
      "amzn-ami-hvm-*-x86_64-gp2" 
    ]
  }

  # Filter by VT
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  # One can filter by owner id
  # owners = ["099720109477"]
}

# Define base image parameters.
data "aws_ami" "cimaster" {

  # Use our provider for the build
  provider = "aws.sca"

  # One can filter by regex
  # name_regex = "^amzn-ami.+\\d+.+gp2$"

  # In case there is multiple images, use recent on.
  most_recent = true

  # Filter ami images by name
  filter {
    name   = "name"
    values = [
      "amzn-ami-hvm-*-x86_64-gp2"
    ]
  }

  # Filter by VT
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  # One can filter by owner id
  # owners = ["099720109477"]
}

# Describe resource
resource "aws_instance" "cimaster" {

  # Use defined build environment
  provider = "aws.sca"

  # User defined build image
  ami           = "${data.aws_ami.cimaster.id}"
  instance_type = "t2.micro"
  count = 1

  # Use builder ssh key
  key_name = "builder-key"

  security_groups = [
   "${aws_security_group.aws_sec.name}"
  ]

  tags {
    Name = "SCA CI Master"
    env = "staging"
    class = "cimaster"
    project = "sca"
  }

  # Save data locally for futher reference
  #provisioner "local-exec" {
  #  command = "echo ${resource} > resource.txt"
  #}

  # Copy deploy script\whatever to use on the host
  provisioner "file" {
    source      = "test.sh"
    destination = "~/test.sh"

    connection {
      type = "ssh"
      user = "ec2-user"
      # password = ""
      private_key = "${file("/var/lib/jenkins/.ssh/jenkins_key")}"
      # agent = true
    }
  }

  # Execute commands, use copied files.
  provisioner "remote-exec" {
    connection {
      type = "ssh"
      user = "ec2-user"
      # password = ""
      private_key = "${file("/var/lib/jenkins/.ssh/jenkins_key")}"
      # agent = true
    }
    inline = [
     "ls -la",
     "sudo ls -la",
     "sudo yum check-update",
     "echo ${aws_instance.optapp.private_ip}",
     "chmod u+x,g+x,o+x ~/test.sh",
     "sudo /home/ec2-user/test.sh"
    ]
  }

  # Copy and execute script as is
  provisioner "remote-exec" {
    connection {
      type = "ssh"
      user = "ec2-user"
      # password = ""
      private_key = "${file("/var/lib/jenkins/.ssh/jenkins_key")}"
      # agent = true
    }
    script = "test.sh"
  }
}

output "optapp_ip" {
  value = "${aws_instance.optapp.public_ip}"
}

output "optapp_id" {
  value = "${aws_instance.optapp.id}"
}
